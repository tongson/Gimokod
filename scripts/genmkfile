#!/usr/bin/env lua
-- debug.traceback = nil
pkgbuildrepo = "/home/abs/build"
distrorepo = "/home/abs/gimokod"
outputdir = "/home/abs/packages"
builddir = "/home/abs/builddir"
pwd = os.getenv("PWD")
concat = function (_) return table.concat(_, " ") end
getpkgbuild = function (_) return pkgbuildrepo.."/"..stripl(pwd).."/".._.."/PKGBUILD" end

function stripl(param)                        -- STRING
    for f in string.gmatch(param, "[^%/%c]+") do
        output = f
    end
    return output
end

function getpopen(cmd)                        -- TABLE
    local _, f = pcall(io.popen, cmd, 'r')
    local out = {}
    for lines in string.gmatch(f:read('*all'), "[%C]+") do
        out[#out+1] = lines
    end
    f:close()
    return out
end

function isdir(param)                         -- BOOLEAN
    local p, f = pcall(io.open, param, 'r')
    if f == nil then return false end
    local ok, error, code = f:read(1)
    f:close()
    if code == 21 then return true end
    return false
end

function isfile(param)                        -- BOOLEAN
    local p, f = pcall(io.open, param, 'r')
    if f == nil then return false end
    local ok, error, code = f:read(1)
    f:close()
    if code == nil then return true end
    return false
end

function table.contains(table, element)       -- BOOLEAN
    for _, value in pairs(table) do
        if value == element then
            return true
        end
    end
    return false
end

function getdepends(param)                    -- TABLE
    local f = io.input(getpkgbuild(param))
    local pkgbuild = io.read('*all')
    f:close()
    local rdep = {}
    local cdep = {}
    local targets = {"makedepends", "depends"}
    local fulldepends = {}
    rdep["device-mapper"]           = "lvm2"
    rdep["gcc-libs"]                = "gcc"
    rdep["boost-libs"]              = "boost"
    rdep["libltdl"]                 = "libtool"
    rdep["libjpeg"]                 = "libjpeg-turbo"
    rdep["libgl"]                   = "mesa"
    rdep["libglapi"]                = "mesa"
    rdep["libegl"]                  = "mesa"
    rdep["ati-dri"]                 = "mesa"
    rdep["intel-dri"]               = "mesa"
    rdep["nouveau-dri"]             = "mesa"
    rdep["khrplatform-devel"]       = "mesa"
    rdep["xorg-server-xvfb"]        = "xorg-server"
    rdep["xorg-server-common"]      = "xorg-server"
    rdep["xorg-server-devel"]       = "xorg-server"
    rdep["poppler-glib"]            = "poppler"
    rdep["gtk-update-icon-cache"]   = "gtk2"
    rdep["nss-freebl"]              = "nss"
    cdep["gmp"]                     = "gcc"
    for _,y in ipairs(targets) do
        if string.find(pkgbuild, y) then
            for x in string.gmatch(string.match(pkgbuild, y.."=%b()"), "'([%w%-%_]*[%=%'%<%>]-)'" ) do
                pattern = string.gsub(x, "-", "%%-")
                if table.contains(rdep, rdep[x]) then
                    x = string.gsub(x, pattern, rdep[x])
                end
                if not table.contains(fulldepends, x) and x ~= param and x ~= cdep[param] then
                    fulldepends[#fulldepends+1] = x
                end
            end
        end
    end
    return fulldepends
end

function getpkgdata(pkg, key)                     -- TABLE
    local f = io.input(getpkgbuild(pkg))
    local pkgbuild=io.read('*all')
    local _pkgname = {}
    local _fullname = {}
    local pkgdata = { pkgname=_pkgname, fullname=_fullname }
    local pkgver = string.match(pkgbuild, "[^%_]+pkgver=([%w%-%.%_]*)")
    local pkgrel = string.match(pkgbuild, "pkgrel=([%d]*)")
    f:close()
    if string.find(pkgbuild, "pkgbase") then
        pkgnames = string.match(pkgbuild, "pkgname=%b()")
        for pkgname in string.gmatch(pkgnames, "'([%w%-%_]*)'" ) do
            _pkgname[#_pkgname+1] = pkgname
            _fullname[#_fullname+1] = pkgname.."-"..pkgver.."-"..pkgrel
        end
    else
        pkgname = string.match(pkgbuild, "pkgname=([%w%-%_]*)")
        _pkgname[#_pkgname+1] = pkgname
        _fullname[#_fullname+1] = pkgname.."-"..pkgver.."-"..pkgrel
    end
    return pkgdata[key]
end

function getpkgbin(pkg, bin)                     -- STRING
    local dir = distrorepo.."/"..stripl(pwd).."/"
    local bins = {}
    local carch = { "any", "x86_64" }
    if bin == "oldpkg" then
        cmd = "echo "..dir..pkg.."-*-*-*.pkg.tar.??"
        pkgname = string.gsub(pkg, "-", "%%-")
        pattern = pkgname.."%-[%a%d%_%.]+%-[%d]+%-[%a%d%_]+%.pkg%.tar%.%w+"
        for _,line in pairs(getpopen(cmd)) do
            for p in string.gmatch(line, "[^%c%z%s]+") do
                if string.find(stripl(p), pattern) then
                    pkgbin = stripl(p)
                    if isfile(dir..pkgbin) then
                        bins[#bins+1] = dir..pkgbin
                    end
                end
            end
        end
    end
    if bin == "newpkg" then
        for _,pkgname in pairs(getpkgdata(pkg, "fullname")) do
            for _,arch in ipairs(carch) do
                if isfile(dir..pkgname.."-"..arch..".pkg.tar.xz") then
                    bins[#bins+1] = dir..pkgname.."-"..arch..".pkg.tar.xz"
                end
            end
        end
    end
    if next(bins) == nil then
       return false
    else
       return concat(bins)
    end
end

function getdep(param)                        -- STRING
    local deps = {}
    for _,dep in pairs(getdepends(param)) do
        if isdir(dep) then
            if getpkgbin(dep, "newpkg") then
                deps[#deps+1] = dep
            elseif isdir(dep) then
                deps[#deps+1] = dep
            end
        end
    end
    return concat(deps)
end

do
    local printf = function (...) io.write(string.format(...)) end
    local dirs = {}
    local pwd = stripl(pwd)
    local distrorepo = distrorepo.."/"..pwd
    for _,d in pairs(getpopen("for d in *;do echo $d;done")) do
        if isdir(d) then
            dirs[#dirs+1] = d
        end
    end
    printf("all:V: %s \n", concat(dirs))

    for _,pkg in pairs(dirs) do
        if getpkgbin(pkg, "newpkg") then
            printf("%s:V: %s %s \n", pkg, getpkgbin(pkg, "newpkg"), getdep(pkg))
            printf("%s: %s \n", getpkgbin(pkg, "newpkg"), getpkgbuild(pkg))
            printf("    rm -rf %s/* \n", builddir)
            printf("    cd %s \n", pkg)
            printf("    echo Started: $(date -uR)\n")
            printf("    /usr/bin/makepkg --noconfirm -mci || $(echo Build failed: %s | /usr/bin/bti && exit 1)\n", pkg)
            printf("    echo Stopped: $(date -uR)\n")
            for _,oldpkg in pairs(getpkgdata(pkg, "pkgname")) do
                printf("    mv %s{,.sig} %s/../backup \n", getpkgbin(oldpkg, "oldpkg"), distrorepo)
            end
            for _,newpkg in pairs(getpkgdata(pkg, "fullname")) do
                printf("    pushd %s\n", outputdir)
                printf("    echo Build finished: %s $(sha256sum %s-*.pkg.tar.??) | /usr/bin/bti\n", newpkg, newpkg)
                printf("    mv %s-*.pkg.tar.??{,.sig} %s\n", newpkg, distrorepo)
                printf("    popd\n")
            end
        else
            printf("%s:V: %s \n", pkg, getdep(pkg))
            printf("    rm -rf %s/* \n", builddir)
            printf("    cd %s \n", pkg)
            printf("    echo Started: $(date -uR)\n")
            printf("    /usr/bin/makepkg --noconfirm -mci || $(echo Build failed: %s | /usr/bin/bti && exit 1)\n", pkg)
            printf("    echo Stopped: $(date -uR)\n")
            for _,newpkg in pairs(getpkgdata(pkg, "fullname")) do
                printf("    pushd %s\n", outputdir)
                printf("    echo Build finished: %s $(sha256sum %s-*.pkg.tar.??) | /usr/bin/bti\n", newpkg, newpkg)
                printf("    mv %s-*.pkg.tar.??{,.sig} %s\n", newpkg, distrorepo)
                printf("    popd\n")
            end
        end
    end
end


