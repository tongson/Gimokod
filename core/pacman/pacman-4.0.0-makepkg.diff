--- pacman-4.0.0/scripts/makepkg.sh.in
+++ pacman-4.0.0/scripts/makepkg.sh.in
@@ -43,7 +43,7 @@
 startdir="$PWD"
 
 packaging_options=('strip' 'docs' 'libtool' 'emptydirs' 'zipman' 'purge' 'upx')
-other_options=('ccache' 'distcc' 'buildflags' 'makeflags')
+other_options=('ccache' 'distcc' 'buildflags' 'makeflags' 'binchecks')
 splitpkg_overrides=('pkgver' 'pkgrel' 'epoch' 'pkgdesc' 'arch' 'license' \
                     'groups' 'depends' 'optdepends' 'provides' 'conflicts' \
                     'replaces' 'backup' 'options' 'install' 'changelog')
@@ -110,6 +110,20 @@
 	printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
 }
 
+Patch() {                                                         
+        local count=0                                             
+        local diff=$1                                            
+        while [[ ${count} -lt 5 ]] ; do         
+                if (patch -p${count} --dry-run -f < "${srcdir}/${diff}")>/dev/null ; then
+                        patch -p${count} -f < "${srcdir}/${diff}"        
+                        return 0                                         
+                else                      
+                        : $(( count++ ))        
+                fi                                                          
+        done                                                                    
+        error "${diff} did not apply!"                                              
+        return 1                                                                  
+}
 
 ##
 # Special exit call for traps, Don't print any error messages when inside,
@@ -844,6 +858,13 @@
 		fi
 	done
 
+	find "${srcdir}" -mindepth 1 -maxdepth 1 -type d -print0 | while read -r -d $'\0' workdir ; do
+		find "${workdir}" -type f '(' -name config.guess -o -name config.sub ')' -print0 | while read -r -d $'\0' x ; do
+			msg "Updating ${x/${workdir}\/} with /usr/share/gnuconfig/${x##*/}"
+			cp -f /usr/share/gnuconfig/"${x##*/}" "${x}"
+		done
+	done
+
 	if (( EUID == 0 )); then
 		# change perms of all source files to root user & root group
 		chown -R 0:0 "$srcdir"
@@ -960,6 +981,80 @@
 tidy_install() {
 	cd "$pkgdir"
 	msg "$(gettext "Tidying install...")"
+  
+ 	if [[ $(check_option binchecks) = "y" ]]; then
+		msg2 "Running binary checks..."
+		local x f dir l
+		local workdir="."
+		local tempdir="${srcdir}/temp"
+		local forbidden_dirs="${pkgdir} ${srcdir} lib64"
+		local rpath_files=$(scanelf -F '%F:%r' -qBR "${workdir}")
+
+        	f=""
+		for dir in ${forbidden_dirs}; do
+			for l in $(echo "${rpath_files}" | grep -E ":${dir}|::|: " || return 0); do
+				f+="  ${l%%:*}\n"
+			done
+		done
+		x=$(
+  		find "${workdir}" -type f \( -perm -u+s -o -perm -g+s \) -print0 | \
+  		xargs -0 scanelf -qyRF '%r %p' | grep -F '$ORIGIN' || return 0
+  		)
+
+		if [[ -n ${f}${x} ]] ; then
+			echo -e "\n"
+			warning "QA notice: files containing problem RPATHS"
+ 			warning "${f}${f:+${x:+\n}}${x}"
+ 			echo -e "\n"
+		fi
+
+		f=$(scanelf -qyRF '%t %p' "${workdir}" | grep -v 'usr/lib/debug/' || return 0)
+		if [[ -n ${f} ]] ; then
+			echo -e "\n"
+			warning "QA notice: TEXTRELs found"
+			warning "${f}"
+  			echo -e "\n"
+		fi
+
+		f=$(scanelf -qyRAF '%e %p' "${workdir}" | grep -v 'usr/lib/debug/' || return 0)
+		if [[ -n ${f} ]] ; then
+			echo -e "\n"
+			warning "QA notice: executable stack found"
+			warning "${f}"
+			echo -e "\n"
+		fi
+
+		f=$(scanelf -ByF '%S %p' "${workdir}"{,usr/}lib*/lib*.so* | gawk '$2 == "" { print }' | sed -e "s:^[[:space:]]${D}:/:")
+		if [[ -n ${f} ]] ; then
+			echo "${f}" > "${tempdir}"/scanelf-missing-SONAME.log
+			sed -e "/^\$/d" -i "${tempdir}"/scanelf-missing-SONAME.log
+			f=$(<"${tempdir}"/scanelf-missing-SONAME.log)
+			if [[ -n ${f} ]] ; then
+				echo -e "\n"
+				warning "QA notice: shared libraries lack a SONAME"
+				warning "${f}"
+				echo -e "\n"
+			else
+				rm -f "${tempdir}"/scanelf-missing-SONAME.log
+			fi
+		fi
+
+
+		f=$(scanelf -ByF '%n %p' "${workdir}"{,usr/}lib*/lib*.so* | gawk '$2 == "" { print }' | sed -e "s:^[[:space:]]${D}:/:")
+		if [[ -n ${f} ]] ; then
+			echo "${f}" > "${tempdir}"/scanelf-missing-NEEDED.log
+			sed -e "/^\$/d" -i "${tempdir}"/scanelf-missing-NEEDED.log
+			f=$(<"${tempdir}"/scanelf-missing-NEEDED.log)
+			if [[ -n ${f} ]] ; then
+				echo -e "\n"
+				warning "QA notice: shared libraries lack NEEDED entries"
+				warning "${f}"
+				echo -e "\n"
+			else
+    				rm -f "${tempdir}"/scanelf-missing-NEEDED.log
+			fi
+		fi
+	fi
 
 	if [[ $(check_option docs) = "n" && -n ${DOC_DIRS[*]} ]]; then
 		msg2 "$(gettext "Removing doc files...")"
@@ -1038,7 +1133,9 @@
 
 	if [[ $(check_option emptydirs) = "n" ]]; then
 		msg2 "$(gettext "Removing empty directories...")"
-		find . -depth -type d -empty -delete
+		find . -mindepth 1 -depth -type d -print0 | while read -r -d $'\0' workdir ; do
+			rmdir --ignore-fail-on-non-empty "${workdir}"
+		done
 	fi
 
 	if [[ $(check_option upx) = "y" ]]; then
@@ -1203,10 +1300,10 @@
 	done
 
 	# check for references to the build and package directory
-	if find "${pkgdir}" -type f -print0 | xargs -0  grep -q -I "${srcdir}" ; then
+	if find "${pkgdir}" -type f -print0 | xargs -0 grep -q -s "${srcdir}" ; then
 		warning "$(gettext "Package contains reference to %s")" "\$srcdir"
 	fi
-	if find "${pkgdir}" -type f -print0 | xargs -0  grep -q -I "${pkgdir}" ; then
+	if find "${pkgdir}" -type f -print0 | xargs -0 grep -q -s "${pkgdir}" ; then
 		warning "$(gettext "Package contains reference to %s")" "\$pkgdir"
 	fi
 
@@ -1271,7 +1368,7 @@
 	# bsdtar's gzip compression always saves the time stamp, making one
 	# archive created using the same command line distinct from another.
 	# Disable bsdtar compression and use gzip -n for now.
-	bsdtar -cf - $comp_files * |
+	LC_ALL=C bsdtar -cf - $comp_files * |
 	case "$PKGEXT" in
 		*tar.gz)  gzip -c -f -n ;;
 		*tar.bz2) bzip2 -c -f ;;
